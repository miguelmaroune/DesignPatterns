The factory design pattern is useful in scenarios where object creation is complex,
 and the client code should be decoupled from the creation process.
It provides a way to encapsulate the instantiation logic and allows the client code to use the factory to create objects without knowing the exact type
or details of the object creation process. This promotes code reusability, maintainability, and flexibility in handling object creation. Additionally,
if the object creation logic changes in the future, only the factory needs to be modified, keeping the client code unchanged.

//Masalan eza 3ndeh kaza no3 payment  PaymentByCard  , PaymentByDelegation  , PaymentByPaypal  bekhla2 payment interface w payment factory w hayda l factory implements l payment interface
se3eta ana bas beje :  Payment cardPayment = PaymentFactory.createPayment("card");
                       Payment delegationPayment = PaymentFactory.createPayment("delegation");

